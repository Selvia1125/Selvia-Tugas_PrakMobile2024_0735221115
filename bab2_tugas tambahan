import 'dart:collection';

// Definisikan kelas ProductivityException
class ProductivityException implements Exception {
  final String message;
  ProductivityException(this.message);

  @override
  String toString() => 'ProductivityException: $message';
}

// Mixin Kinerja untuk menambah atau mengurangi produktivitas
mixin KinerjaMixin {
  int produktivitas = 0;
  DateTime? lastUpdate;

  // Metode untuk memperbarui produktivitas dengan validasi
  void updateProduktivitas(int nilai) {
    final now = DateTime.now();
    if (lastUpdate != null && now.difference(lastUpdate!).inDays < 30) {
      throw ProductivityException(
          'Produktivitas hanya bisa diperbarui setiap 30 hari.');
    }
    if (nilai < 0 || nilai > 100) {
      throw ProductivityException('Produktivitas harus di antara 0-100');
    }
    produktivitas = nilai;
    lastUpdate = now;
  }
}

// Enum untuk peran karyawan
enum PeranKaryawan { Developer, NetworkEngineer, Manager }

// Kelas dasar Karyawan
abstract class Karyawan with KinerjaMixin {
  final String nama;
  final int umur;
  final PeranKaryawan peran;

  Karyawan({
    required this.nama,
    required this.umur,
    required this.peran,
  });
}

// Kelas KaryawanTetap dan KaryawanKontrak
class KaryawanTetap extends Karyawan {
  KaryawanTetap(
      {required String nama, required int umur, required PeranKaryawan peran})
      : super(nama: nama, umur: umur, peran: peran);
}

class KaryawanKontrak extends Karyawan {
  KaryawanKontrak(
      {required String nama, required int umur, required PeranKaryawan peran})
      : super(nama: nama, umur: umur, peran: peran);
}

void main() {
  var karyawan1 =
      KaryawanTetap(nama: 'Alice', umur: 30, peran: PeranKaryawan.Developer);

  // Coba untuk memperbarui produktivitas dengan penanganan pengecualian
  try {
    karyawan1.updateProduktivitas(
        110); // Ini akan menyebabkan pengecualian karena nilai lebih dari 100
  } catch (e) {
    print(
        e); // Output: ProductivityException: Produktivitas harus di antara 0-100
  }

  // Contoh update produktivitas yang valid
  try {
    karyawan1.updateProduktivitas(90);
    print('Produktivitas diperbarui menjadi: ${karyawan1.produktivitas}');
  } catch (e) {
    print(e);
  }

  // Coba untuk update lagi dalam waktu kurang dari 30 hari
  try {
    karyawan1.updateProduktivitas(
        85); // Ini akan gagal karena waktu update kurang dari 30 hari
  } catch (e) {
    print(
        e); // Output: ProductivityException: Produktivitas hanya bisa diperbarui setiap 30 hari.
  }
}
